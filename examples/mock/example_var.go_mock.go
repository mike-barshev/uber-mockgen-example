// Code generated by MockGen. DO NOT EDIT.
// Source: example_var.go
//
// Generated by this command:
//
//	mockgen -source=example_var.go -destination=mock/example_var.go_mock.go -package=examples_mock
//
// Package examples_mock is a generated GoMock package.
package examples_mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPrefixInterface is a mock of PrefixInterface interface.
type MockPrefixInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPrefixInterfaceMockRecorder
}

// MockPrefixInterfaceMockRecorder is the mock recorder for MockPrefixInterface.
type MockPrefixInterfaceMockRecorder struct {
	mock *MockPrefixInterface
}

// NewMockPrefixInterface creates a new mock instance.
func NewMockPrefixInterface(ctrl *gomock.Controller) *MockPrefixInterface {
	mock := &MockPrefixInterface{ctrl: ctrl}
	mock.recorder = &MockPrefixInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrefixInterface) EXPECT() *MockPrefixInterfaceMockRecorder {
	return m.recorder
}

// AddPostfix mocks base method.
func (m *MockPrefixInterface) AddPostfix(postfix, str string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPostfix", postfix, str)
	ret0, _ := ret[0].(string)
	return ret0
}

// AddPostfix indicates an expected call of AddPostfix.
func (mr *MockPrefixInterfaceMockRecorder) AddPostfix(postfix, str any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPostfix", reflect.TypeOf((*MockPrefixInterface)(nil).AddPostfix), postfix, str)
}

// AddPrefix mocks base method.
func (m *MockPrefixInterface) AddPrefix(prefix, str string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPrefix", prefix, str)
	ret0, _ := ret[0].(string)
	return ret0
}

// AddPrefix indicates an expected call of AddPrefix.
func (mr *MockPrefixInterfaceMockRecorder) AddPrefix(prefix, str any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPrefix", reflect.TypeOf((*MockPrefixInterface)(nil).AddPrefix), prefix, str)
}
